package ru.yandex.practicum.filmorate.dao;

import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import ru.yandex.practicum.filmorate.exception.ValidationException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.storage.FilmStorage;

import java.util.Collection;
import java.util.Optional;

@Repository
@Primary
public class FilmDbStorage implements FilmStorage {
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public FilmDbStorage(JdbcTemplate jdbcTemplate){
        this.jdbcTemplate=jdbcTemplate;
    }

    @Override
    public void save(Film film) {
        String sqlQueryFilm = "insert into films(name, description, releaseDate, duration, rate_id) " +
                "values (?, ?, ?, ?, ?)";
        jdbcTemplate.update(sqlQueryFilm,
                film.getName(),
                film.getDescription(),
                film.getReleaseDate(),
                film.getDuration(),
                film.getRate().getRateId()
        );

//        String sqlQueryGenresFilmsId = "insert into genres_films(film_id) values(?)";
//        jdbcTemplate.update(sqlQueryGenresFilmsId, film.getId());
//
//        String sqlQueryGenresFilmsGe = "insert into genres_films(genre_id) values(?)";
//        jdbcTemplate.update(sqlQueryGenresFilmsGe, film.getGenre());


    }


    @Override
    public void update(@NotNull Film film) throws ValidationException {

    }

    @Override
    public Optional<Film> getFilmById(int id) {

        // выполняем запрос к базе данных.
        SqlRowSet filmsRows = jdbcTemplate.queryForRowSet("select * from films where id = ?", id);

        // обрабатываем результат выполнения запроса
//        if(filmsRows.next()) {
//            Film film = new Film(
//                    filmsRows.getInt("film_id"),
//                    filmsRows.getString("name"),
//                    filmsRows.getString("description"),
//                    filmsRows.getString("releasedate"),
//                    filmsRows.getInt("duration"),
//                    filmsRows.getInt(""),
//                    filmsRows.getInt("rate_id"));

//            private int id;            // как быть с ид?
//            private String name;
//            private String description;
//            private String releaseDate;
//            private int duration;
//            private Genre genre;
//            private Rate rate;

            /*
            FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME CHARACTER VARYING(255) NOT NULL,
	DESCRIPTION CHARACTER VARYING(500) NOT NULL,
	RELEASEDATE CHARACTER VARYING(255) NOT NULL,
	DURATION CHARACTER VARYING(255) NOT NULL,
	RATE_ID INTEGER NOT NULL,
             */

//            log.info("Найден пользователь: {} {}", user.getId(), user.getNickname());
//
//            return Optional.of(user);
//        } else {
//            log.info("Пользователь с идентификатором {} не найден.", id);
//            return Optional.empty();
//        }
//    }


        return Optional.empty();
    }

    @Override
    public int generateId() {
        return 0;
    }

    @Override
    public Collection<Film> getFilms() {
        return null;
    }
}
